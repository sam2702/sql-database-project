name: SQL Project Automation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  validate-and-deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find and Validate SQL Scripts
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path "${{ github.workspace }}" -Directory -Recurse |
                     Where-Object { Test-Path "$($_.FullName)\*.sql" }

          foreach ($folder in $folders) {
            Write-Host "Checking folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql
            foreach ($file in $sqlFiles) {
              Write-Host "Validating SQL syntax for $($file.Name)"
              try {
                sqlcmd -S "${{ secrets.SQL_SERVER }}" -U "${{ secrets.SQL_USER }}" -P "${{ secrets.SQL_PASSWORD }}" -i $file.FullName -b
                Write-Host "$($file.Name) passed syntax check."
              }
              catch {
                Write-Host "Could not validate $($file.Name). SQL Server might be unavailable."
              }
            }
          }

      - name: Deploy SQL Scripts
        if: ${{ always() }} # Runs even if validation skipped
        shell: pwsh
        run: |
          $folders = Get-ChildItem -Path "${{ github.workspace }}" -Directory -Recurse |
                     Where-Object { Test-Path "$($_.FullName)\*.sql" }

          foreach ($folder in $folders) {
            Write-Host "Deploying scripts in folder: $($folder.FullName)"
            $sqlFiles = Get-ChildItem -Path $folder.FullName -Filter *.sql
            foreach ($file in $sqlFiles) {
              Write-Host "Executing $($file.Name)"
              try {
                sqlcmd -S "${{ secrets.SQL_SERVER }}" -U "${{ secrets.SQL_USER }}" -P "${{ secrets.SQL_PASSWORD }}" -i $file.FullName -b
              }
              catch {
                Write-Host "Failed to deploy $($file.Name). SQL Server might be unavailable."
              }
            }
          }
